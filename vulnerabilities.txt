Отчет о безопасности базы данных flower_shop

1. SQL-инъекции:

Описание: База данных подвержена возможным атакам SQL-инъекций из-за неправильной фильтрации входных данных.
Например, следующий SQL-запрос подвержен атаке SQL-инъекции:

```sql
query = "SELECT * FROM product WHERE name = "Роза" AND height = 50"
```

Рекомендации: Используйте параметризованные запросы или ORM для предотвращения SQL-инъекций. Например, вместо
этого можно использовать параметризованный запрос:

```sql
query = "SELECT * FROM product WHERE name = %s AND height = %s"
# Значения параметров
product_name = "Роза"
product_height = 50
```

2. Утечка конфиденциальной информации:

Описание: Некоторые таблицы, такие как customer и supplier, содержат конфиденциальные данные, которые могут стать
объектом атаки. Например, в таблице customer хранятся личные данные клиентов, такие как адреса и телефоны.

Рекомендации: Реализуйте шифрование хранения и строгое управление доступом к данным. Например, храните конфиденциальные
данные в зашифрованном виде и предоставляйте доступ только авторизованным пользователям.

3. Недостаточное управление доступом:

Описание: В базе данных отсутствует управление доступом к таблицам и данным, что может привести к несанкционированному
доступу. Например, все пользователи имеют доступ к таблице с конфиденциальными данными о клиентах.

Рекомендации: Используйте роли и разрешения для ограничения доступа к данным только для авторизованных пользователей.
Например, создайте роли для администраторов, менеджеров и клиентов, каждая из которых имеет свой уровень доступа к
данным.

Пример:

```sql
GRANT SELECT ON customer TO manager_role;
```

4. Отсутствие аутентификации и авторизации:

Описание: Не реализованы механизмы аутентификации пользователей и управления их правами доступа к данным. Например,
любой пользователь может получить доступ к конфиденциальным данным, не проходя аутентификацию.

Рекомендации: Создайте систему аутентификации и авторизации для обеспечения безопасного доступа к базе данных.
Например, реализуйте механизмы входа на основе логина и пароля, а также управление правами доступа на основе ролей.

Пример:

```sql
CREATE USER 'new_user'@'localhost' IDENTIFIED BY 'password';
GRANT SELECT, INSERT, UPDATE, DELETE ON flower_shop.* TO 'new_user'@'localhost';
```

5. Нарушение целостности данных:

Описание: Удаление записей из одной таблицы может привести к несогласованным данным в других таблицах. Например,
удаление продукта из таблицы product не приведет к удалению связанных записей в таблице order_item.

Рекомендации: Используйте каскадное удаление или обработку связанных записей при удалении основных записей. Например,
настройте внешние ключи с каскадным удалением для автоматического удаления связанных записей.

Пример:

```sql
ALTER TABLE order_item ADD CONSTRAINT fk_product_id FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE;
```

8. Неявные уязвимости связей между таблицами:

Описание: Некоторые таблицы содержат ссылки на другие таблицы, но не имеют внешних ключей для обеспечения целостности
данных. Например, таблица shipment_item ссылается на таблицу shipment по полю shipment_id, но это не является внешним
ключом.

Рекомендации: Добавьте внешние ключи для обеспечения целостности данных