Order API Endpoints Documentation

## 1. Получение информации обо всех заказах
- **Описание**: Этот эндпоинт позволяет получить информацию обо всех заказах.
- **Путь**: `GET /api/v1/orders`
- **Параметры**: нет
- **Ответ в случае успеха**:
  ```json
  [
    {
      "id": 1,
      "date": "2024-05-11",
      "customerId": 1,
      "status": "CHECKOUT"
    },
    {
      "id": 2,
      "date": "2024-05-12",
      "customerId": 2,
      "status": "FULFILLED"
    }
  ]
  ```

## 2. Получение информации о заказе по идентификатору
- **Описание**: Этот эндпоинт позволяет получить информацию о конкретном заказе по его идентификатору.
- **Путь**: `GET /api/v1/orders/{id}`
- **Параметры**:
  - `id` (число, обязательный) - идентификатор заказа
- **Ответ в случае успеха**:
  ```json
  {
    "id": 1,
    "date": "2024-05-11",
    "customerId": 1,
    "status": "CHECKOUT"
  }
  ```
- **Ответ в случае, если запись не найдена**:
  ```json
  {
    "status": 404,
    "error": "Not Found"
  }
  ```

## 3. Получение информации о заказе с информацией о клиенте по идентификатору заказа
- **Описание**: Этот эндпоинт позволяет получить информацию о конкретном заказе вместе с информацией о клиенте по идентификатору заказа.
- **Путь**: `GET /api/v1/orders/{id}/customerInfo`
- **Параметры**:
  - `id` (число, обязательный) - идентификатор заказа
- **Ответ в случае успеха**:
  ```json
  {
    "orderId": 1,
    "orderDate": "2024-05-11",
    "customerId": 1,
    "customerFirstName": "John",
    "customerLastName": "Doe",
    "customerAddress": "Belarus, Minsk",
    "customerEmail": "john.doe@example.com",
    "customerPhone": "+123456789",
    "status": "CHECKOUT"
  }
  ```
- **Ответ в случае, если запись не найдена**:
  ```json
  {
    "status": 404,
    "error": "Not Found"
  }
  ```

## 4. Получение всех товаров в заказе по идентификатору заказа
- **Описание**: Этот эндпоинт позволяет получить все товары, находящиеся в конкретном заказе по его идентификатору.
- **Путь**: `GET /api/v1/orders/{id}/items`
- **Параметры**:
  - `id` (число, обязательный) - идентификатор заказа
- **Ответ в случае успеха**:
  ```json
  [
    {
      "id": 1,
      "orderId": 1,
      "productId": 1,
      "quantity": 2
    },
    {
      "id": 2,
      "orderId": 1,
      "productId": 2,
      "quantity": 1
    }
  ]
  ```
- **Ответ в случае, если запись не найдена**:
  ```json
  {
    "status": 404,
    "error": "Not Found"
  }
  ```

## 5. Создание записи заказа
- **Описание**: Этот эндпоинт позволяет создать новую запись заказа.
- **Путь**: `POST /api/v1/orders`
- **Параметры**: нет
- **RequestBody**:
  - `date` (строка, обязательный) - дата заказа
  - `customerId` (число, обязательный) - идентификатор клиента, сделавшего заказ
  - `status` (строка, обязательный) - статус заказа
- **Ответ в случае успеха**:
  ```json
  {
    "id": 1,
    "date": "2024-05-11",
    "customerId": 1,
    "status": "CHECKOUT"
  }
  ```

## 6. Обновление данных заказа по идентификатору
- **Описание**: Этот эндпоинт позволяет изменить данные существующей записи заказа по его идентификатору.
- **Путь**: `PUT /api/v1/orders/{id}`
- **Параметры**:
  - `id` (число, обязательный) - идентификатор заказа
- **RequestBody**:
  - `date` (строка, обязательный) - дата заказа
  - `customerId` (число, обязательный) - идентификатор клиента, сделавшего заказ
  - `status` (строка, обязательный) - статус заказа
- **Ответ в случае успеха**:
  ```json
  {
    "id": 1,
    "date": "2024-05-11",
    "customerId": 1,
    "status": "CHECKOUT"
  }
  ```
- **Ответ в случае, если запись не найдена**:
  ```json
  {
    "status": 404,
    "error": "Not Found"
  }
  ```

## 7. Удаление записи заказа по идентификатору
- **Описание**: Этот эндпоинт позволяет удалить запись заказа по его идентификатору.
- **Путь**: `DELETE /api/v1/orders/{id}`
- **Параметры**:
  - `id` (число, обязательный) - идентификатор заказа
- **Ответ в случае успеха**:
  ```json
  {
    "status": 204,
    "message": "No Content"
  }
  ```
- **Ответ в случае, если запись не найдена**:
  ```json
  {
    "status": 404,
    "error": "Not Found"
  }
